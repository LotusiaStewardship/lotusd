name: ðŸ”§ Lotus Tools Build

on:
  workflow_call:
    inputs:
      version:
        description: "The version to build"
        required: true
        type: string

# Global defaults for all jobs
defaults:
  run:
    shell: bash

jobs:
  # Build the DNS seeder utility
  build-lotus-seeder:
    name: ðŸŒ± Build lotus-seeder
    runs-on: [ self-hosted, ubuntu-latest ]
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-lotus-seeder-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-lotus-seeder-

    - name: Set lowercase repository owner
      id: lowercase_repo_owner
      run: |
        echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build lotus-seeder image
    - name: Build lotus-seeder Docker image
      uses: docker/build-push-action@v4
      if: github.event_name != 'pull_request'
      with:
        context: .
        file: dockerfiles/Dockerfile.lotus-seeder
        push: true
        load: true # Load into local Docker also for extraction
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Move the cache
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    # Wait briefly for the image to be available
    - name: Wait for image to be available
      if: github.event_name != 'pull_request'
      run: |
        sleep 10

    # Extract binary from the local image
    - name: Extract lotus-seeder from Docker image
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p ./artifacts

        # Create a container from the local image
        CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:sha-${{ github.sha }})

        # Extract the binary
        docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-seeder ./artifacts/
        docker rm -v $CONTAINER_ID

        # Verify the file was extracted
        ls -la ./artifacts/

        # Check the binary file size to make sure it's not empty
        filesize=$(stat -c%s "./artifacts/lotus-seeder" 2>/dev/null || echo "0")
        echo "Binary file size: $filesize bytes"

        if [ "$filesize" -eq 0 ]; then
          echo "Error: Extracted binary file is empty"
          exit 1
        fi

    # Upload binary as artifact
    - name: Upload lotus-seeder as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: lotus-seeder-${{ inputs.version }}
        path: ./artifacts/lotus-seeder
        retention-days: 14

  # Build the wallet utility
  build-lotus-wallet:
    name: ðŸ’¼ Build lotus-wallet
    runs-on: [ self-hosted, ubuntu-latest ]
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-lotus-wallet-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-lotus-wallet-

    - name: Set lowercase repository owner
      id: lowercase_repo_owner
      run: |
        echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build lotus-wallet image
    - name: Build lotus-wallet Docker image
      uses: docker/build-push-action@v4
      if: github.event_name != 'pull_request'
      with:
        context: .
        file: dockerfiles/Dockerfile.lotus-wallet
        push: true
        load: true # Load into local Docker also for extraction
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Move the cache
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    # Wait briefly for the image to be available
    - name: Wait for image to be available
      if: github.event_name != 'pull_request'
      run: |
        sleep 10

    # Extract binary from the local image
    - name: Extract lotus-wallet from Docker image
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p ./artifacts

        # Create a container from the local image
        CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:sha-${{ github.sha }})

        # Extract the binary
        docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-wallet ./artifacts/
        docker rm -v $CONTAINER_ID

        # Verify the file was extracted
        ls -la ./artifacts/

        # Check the binary file size to make sure it's not empty
        filesize=$(stat -c%s "./artifacts/lotus-wallet" 2>/dev/null || echo "0")
        echo "Binary file size: $filesize bytes"

        if [ "$filesize" -eq 0 ]; then
          echo "Error: Extracted binary file is empty"
          exit 1
        fi

    # Upload binary as artifact
    - name: Upload lotus-wallet as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: lotus-wallet-${{ inputs.version }}
        path: ./artifacts/lotus-wallet
        retention-days: 14
