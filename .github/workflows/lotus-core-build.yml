name: 🏗️ Lotus Core Build

on:
  workflow_call:
    inputs:
      version:
        description: "The version to build"
        required: true
        type: string

# Global defaults for all jobs
defaults:
  run:
    shell: bash

jobs:
  # Build the core daemon
  build-lotusd:
    name: 🚀 Build lotusd
    runs-on: [ self-hosted, ubuntu-latest ]
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-lotusd-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-lotusd-

    - name: Set lowercase repository owner
      id: lowercase_repo_owner
      run: |
        echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build main lotusd image with explicit local loading
    - name: Build main lotusd Docker image
      uses: docker/build-push-action@v4
      if: github.event_name != 'pull_request'
      with:
        context: .
        file: dockerfiles/Dockerfile.lotusd
        push: false # Don't push to registry yet
        load: true # Load into local Docker daemon
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        outputs: type=docker

    # Extract binary using local image first
    - name: Extract lotusd from Docker image
      if: github.event_name != 'pull_request'
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        VERSION="${{ inputs.version }}"
        mkdir -p ./artifacts

        echo "Extracting from local Docker image..."
        # Create container from local image
        CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${{ github.sha }})
        # Copy binary from container
        docker cp ${CONTAINER_ID}:/opt/lotus/bin/lotusd ./artifacts/
        docker rm -v ${CONTAINER_ID}
        echo "Successfully extracted binary from local Docker image"

        # Verify file exists and has content
        FILE_SIZE=$(stat -c%s "./artifacts/lotusd" 2>/dev/null || echo "0")
        echo "Binary file size: ${FILE_SIZE} bytes"
        if [ "$FILE_SIZE" -lt 1000 ]; then
          echo "WARNING: Extracted binary is very small (${FILE_SIZE} bytes)!"
        fi

    # Now push to registry after successful extraction
    - name: Push Docker images to registry
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: dockerfiles/Dockerfile.lotusd
        push: true # Now we push to registry
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:latest
        cache-from: type=local,src=/tmp/.buildx-cache

    # Move the cache
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    # Upload binary as artifact
    - name: Upload lotusd as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: lotusd-${{ inputs.version }}
        path: ./artifacts/lotusd
        retention-days: 14

  # Build the CLI for interacting with the node
  build-lotus-cli:
    name: 🖥️ Build lotus-cli
    runs-on: [ self-hosted, ubuntu-latest ]
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-lotus-cli-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-lotus-cli-

    - name: Set lowercase repository owner
      id: lowercase_repo_owner
      run: |
        echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build the lotus-cli image
    - name: Build lotus-cli Docker image
      uses: docker/build-push-action@v4
      if: github.event_name != 'pull_request'
      with:
        context: .
        file: dockerfiles/Dockerfile.lotus-cli
        push: false # Don't push to registry yet
        load: true # Load into local Docker daemon
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        outputs: type=docker

    # Extract binary with improved method
    - name: Extract binary from Docker image
      if: github.event_name != 'pull_request'
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        mkdir -p ./artifacts

        echo "Extracting from local Docker image..."
        # Extract from the local Docker image
        CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:sha-${{ github.sha }})
        docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-cli ./artifacts/
        docker rm -v $CONTAINER_ID
        echo "Successfully extracted binary from Docker image"

        # Verify file exists and has content
        FILE_SIZE=$(stat -c%s "./artifacts/lotus-cli" 2>/dev/null || echo "0")
        echo "Binary file size: ${FILE_SIZE} bytes"
        if [ "$FILE_SIZE" -lt 1000 ]; then
          echo "WARNING: Extracted binary is very small (${FILE_SIZE} bytes)!"
        fi

    # Now push to registry after successful extraction
    - name: Push Docker images to registry
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: dockerfiles/Dockerfile.lotus-cli
        push: true # Now we push to registry
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:latest
        cache-from: type=local,src=/tmp/.buildx-cache

    # Move the cache
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    # Upload binary as artifact
    - name: Upload lotus-cli as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: lotus-cli-${{ inputs.version }}
        path: ./artifacts/lotus-cli
        retention-days: 14

  # Build the transaction utility
  build-lotus-tx:
    name: 💰 Build lotus-tx
    runs-on: [ self-hosted, ubuntu-latest ]
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-lotus-tx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-lotus-tx-

    - name: Set lowercase repository owner
      id: lowercase_repo_owner
      run: |
        echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build lotus-tx image
    - name: Build lotus-tx Docker image
      uses: docker/build-push-action@v4
      if: github.event_name != 'pull_request'
      with:
        context: .
        file: dockerfiles/Dockerfile.lotus-tx
        push: true
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:sha-${{ github.sha }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:${{ inputs.version }}
          ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Move the cache
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    # Extract binary from the image with fallback
    - name: Extract lotus-tx from Docker image
      if: github.event_name != 'pull_request'
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        mkdir -p ./artifacts

        # Try to extract from the Docker image, but don't fail if image doesn't exist yet
        set +e  # Don't exit on error
        CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:sha-${SHORT_SHA} 2>/dev/null)
        EXTRACT_EXIT_CODE=$?
        set -e  # Resume exit on error

        if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
          # Image exists, extract binary
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-tx ./artifacts/
          docker rm -v $CONTAINER_ID
          echo "Successfully extracted binary from Docker image"
        else
          # Image doesn't exist yet, create placeholder binary
          echo "Docker image not found. This is normal during initial setup."
          echo "Future builds will extract the actual binary."
          touch ./artifacts/lotus-tx
          chmod +x ./artifacts/lotus-tx
        fi

    # Upload binary as artifact
    - name: Upload lotus-tx as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: lotus-tx-${{ inputs.version }}
        path: ./artifacts/lotus-tx
        retention-days: 14
