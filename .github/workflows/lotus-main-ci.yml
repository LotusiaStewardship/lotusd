name: 🌸 Lotus Main CI

# Add concurrency to prevent multiple workflows running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  # ======= VERSION MANAGEMENT STEPS =======

  # Step 1: Version management
  version-management:
    name: 📊 Version Management
    uses: ./.github/workflows/lotus-version-management.yml
    secrets: inherit

  # Step 2: Prepare for potential revert (runs in parallel with builds)
  prepare-revert:
    name: 🔄 Prepare Revert
    needs: [ version-management ]
    if: |
      always() && 
      needs.version-management.outputs.version_bumped == 'true'
    runs-on: ubuntu-latest
    outputs:
      revert_ready: 'true'
      prev_version: ${{ steps.calculate.outputs.prev_version }}

    steps:
    - name: Calculate previous version
      id: calculate
      run: |
        CURRENT_VERSION="${{ needs.version-management.outputs.version }}"
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        # Calculate the previous version (for potential revert)
        PREV_PATCH=$((PATCH - 1))
        PREV_VERSION="$MAJOR.$MINOR.$PREV_PATCH"
        echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION, Previous version: $PREV_VERSION"

  # ======= BUILD GROUPS =======
  # Each group runs in parallel after version management

  # Group 1: Core Components
  build-core:
    name: 🏗️ Core Components
    needs: [ version-management ]
    if: |
      always() && 
      (needs.version-management.outputs.should_bump == 'false' || 
       needs.version-management.outputs.version_bumped == 'true')
    uses: ./.github/workflows/lotus-core-build.yml
    with:
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

  # Group 2: Tool Components
  build-tools:
    name: 🔧 Tool Components
    needs: [ version-management ]
    if: |
      always() && 
      (needs.version-management.outputs.should_bump == 'false' || 
       needs.version-management.outputs.version_bumped == 'true')
    uses: ./.github/workflows/lotus-tools-build.yml
    with:
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

  # Group 3: GUI Components
  build-gui:
    name: 🖥️ GUI Components
    needs: [ version-management ]
    if: |
      always() && 
      (needs.version-management.outputs.should_bump == 'false' || 
       needs.version-management.outputs.version_bumped == 'true')
    uses: ./.github/workflows/lotus-gui-build.yml
    with:
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

  # Group 4: Mining Components
  build-miner:
    name: ⛏️ Mining Components
    needs: [ version-management ]
    if: |
      always() && 
      (needs.version-management.outputs.should_bump == 'false' || 
       needs.version-management.outputs.version_bumped == 'true')
    uses: ./.github/workflows/lotus-miner-build.yml
    with:
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

  # ======= POST-BUILD STEPS =======

  # Revert version bump if any builds failed
  revert-version:
    name: ⏮️ Revert Version
    needs: [ version-management, build-core, build-tools, build-gui, build-miner, prepare-revert ]
    if: |
      always() && 
      needs.version-management.outputs.version_bumped == 'true' &&
      (needs.build-core.result == 'failure' || 
       needs.build-tools.result == 'failure' || 
       needs.build-gui.result == 'failure' || 
       needs.build-miner.result == 'failure')
    uses: ./.github/workflows/lotus-version-revert.yml
    with:
      current_version: ${{ needs.version-management.outputs.version }}
      prev_version: ${{ needs.prepare-revert.outputs.prev_version }}
      build_failures: ${{ needs.build-core.result == 'failure' || needs.build-tools.result == 'failure' || needs.build-gui.result == 'failure' || needs.build-miner.result == 'failure' }}
    secrets: inherit

  # ======= RELEASE STEPS =======

  # Package artifacts and create release
  release:
    name: 🚀 Release
    needs: [ version-management, build-core, build-tools, build-gui, build-miner, revert-version ]
    if: |
      always() && 
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' &&
      needs.build-core.result == 'success' &&
      needs.build-tools.result == 'success' &&
      needs.build-gui.result == 'success' &&
      needs.build-miner.result == 'success' &&
      (needs.revert-version.result == 'skipped' || needs.revert-version.result == 'success')
    uses: ./.github/workflows/lotus-release.yml
    with:
      version: ${{ needs.version-management.outputs.version }}
    secrets: inherit

# Add permissions at the top level
permissions:
  contents: write
  packages: write
