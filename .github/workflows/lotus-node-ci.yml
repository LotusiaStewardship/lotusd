name: Lotus Node CI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Check the current version first but don't modify it yet
  version-check:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get-version.outputs.version }}
      should_bump: ${{ steps.check-bump.outputs.should_bump }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      # Determine if we should bump the version
      - name: Check if version bump is needed
        id: check-bump
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "Latest tag: $LATEST_TAG"
          
          if [[ "$LATEST_TAG" == "none" ]]; then
            # No tags exist yet, definitely bump
            echo "should_bump=true" >> $GITHUB_OUTPUT
            echo "Version bump needed: No tags exist yet"
          else
            # Count commits since last tag
            COMMITS_SINCE_TAG=$(git rev-list $LATEST_TAG..HEAD --count)
            echo "Commits since last tag: $COMMITS_SINCE_TAG"
            
            if [[ "$COMMITS_SINCE_TAG" -gt 5 ]]; then
              # If more than 5 commits since last tag, bump the version
              echo "should_bump=true" >> $GITHUB_OUTPUT
              echo "Version bump needed: $COMMITS_SINCE_TAG commits since last tag"
            else
              echo "should_bump=false" >> $GITHUB_OUTPUT
              echo "Version bump not needed: Only $COMMITS_SINCE_TAG commits since last tag"
            fi
          fi

  # After successful build, bump the version if needed
  version-bump:
    needs: [version-check]
    runs-on: ubuntu-latest
    # Only run on the master branch, not on pull requests or tags, and only if we should bump
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' && needs.version-check.outputs.should_bump == 'true'
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      version_bumped: ${{ steps.commit.outputs.version_bumped }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Bump the patch version (8.3.4 -> 8.3.5)
      - name: Bump version
        id: bump-version
        run: |
          # Extract version components
          CURRENT_VERSION="${{ needs.version-check.outputs.current_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT_VERSION -> New: $NEW_VERSION"
          
          # Update CMakeLists.txt
          sed -i "s/VERSION $CURRENT_VERSION/VERSION $NEW_VERSION/" CMakeLists.txt
          
          # Update PKGBUILD
          sed -i "s/pkgver=$CURRENT_VERSION/pkgver=$NEW_VERSION/" contrib/aur/lotus/PKGBUILD
      
      # Commit and push the version changes
      - name: Commit version bump
        id: commit
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git add CMakeLists.txt contrib/aur/lotus/PKGBUILD
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}"
          
          # Push directly to master - make sure branch protection allows this
          git push origin HEAD:master
          
          echo "version_bumped=true" >> $GITHUB_OUTPUT
          echo "Version bumped and committed successfully"

  # Now build the code with the updated version
  build:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    # Run this step even if version-bump was skipped (when should_bump is false)
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Always get the latest code with the potentially bumped version
        with:
          ref: master
      
      # Get current version (after potential bump)
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Set lowercase repository owner name for Docker
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=${{ steps.get-version.outputs.version }},enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }}
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Test Docker image
      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker pull ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${SHORT_SHA}
          docker run --name lotus-test -d ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${SHORT_SHA} -printtoconsole -server
          sleep 10
          docker logs lotus-test | grep -q "lotus" && echo "Container started successfully" || (echo "Container failed to start properly" && exit 1)
          docker rm -f lotus-test
      
      # Extract binaries from the image for artifacts
      - name: Extract binaries from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Create a temporary container to copy files from
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${SHORT_SHA})
          
          # Copy each binary
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotusd ./artifacts/
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-cli ./artifacts/
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-qt ./artifacts/
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-seeder ./artifacts/
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-tx ./artifacts/
          docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-wallet ./artifacts/
          
          # Create a tarball of all binaries - use the current version from the files
          cd ./artifacts
          tar -czvf lotus-binaries-${{ steps.get-version.outputs.version }}.tar.gz lotus*
          cd ..
          
          # Remove the container
          docker rm -v $CONTAINER_ID
      
      # Upload binaries as artifacts - use the current version
      - name: Upload binaries as artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-binaries-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
          retention-days: 14

  # Final job to create a tag and release
  create-tag:
    needs: [version-check, version-bump, build]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.ref == 'refs/heads/master' && 
      needs.build.result == 'success' && 
      (needs.version-check.outputs.should_bump == 'false' || needs.version-bump.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0
      
      - name: Get current version (post-bump)
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
            echo "should_tag=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "should_tag=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION does not exist yet"
          fi
      
      - name: Set up Git identity
        if: steps.check-tag.outputs.should_tag == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Create and push tag
        if: steps.check-tag.outputs.should_tag == 'true'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag v$VERSION"
      
      # Download artifacts using the current version from the files
      - name: Download artifacts
        if: steps.check-tag.outputs.should_tag == 'true'
        uses: actions/download-artifact@v4
        with:
          name: lotus-binaries-${{ steps.get-version.outputs.version }}
          path: ./artifacts
      
      # Create GitHub Release
      - name: Create Release
        if: steps.check-tag.outputs.should_tag == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          files: ./artifacts/lotus-binaries-*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true

  # deploy:
  #   needs: build
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Set up SSH
  #       uses: webfactory/ssh-agent@v0.7.0
  #       with:
  #         ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
  #     - name: Update docker-compose file
  #       run: |
  #         # Ensure proper image format if no explicit registry was specified
  #         if grep -q "image: lotus-node:" docker-compose.yml; then
  #           sed -i 's|image: lotus-node:.*|image: ghcr.io/${{ github.repository_owner }}/lotus-node:latest|g' docker-compose.yml
  #         fi
          
  #         # Update image reference in docker-compose.yml to use GitHub Container Registry with correct format
  #         if grep -q "image: ghcr.io/lotus-node:" docker-compose.yml; then
  #           sed -i 's|image: ghcr.io/lotus-node:.*|image: ghcr.io/${{ github.repository_owner }}/lotus-node:latest|g' docker-compose.yml
  #         fi
      
  #     - name: Deploy to production
  #       if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
  #       run: |
  #         mkdir -p ~/.ssh
  #         ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
  #         scp docker-compose.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/data/lotus/
  #         ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /data/lotus && docker-compose pull && docker-compose up -d"