name: Lotus Node CI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Check the current version first but don't modify it yet
  version-check:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get-version.outputs.version }}
      should_bump: ${{ steps.check-bump.outputs.should_bump }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      # Determine if we should bump the version
      - name: Check if version bump is needed
        id: check-bump
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "Latest tag: $LATEST_TAG"
          
          if [[ "$LATEST_TAG" == "none" ]]; then
            # No tags exist yet, definitely bump
            echo "should_bump=true" >> $GITHUB_OUTPUT
            echo "Version bump needed: No tags exist yet"
          else
            # Count commits since last tag
            COMMITS_SINCE_TAG=$(git rev-list $LATEST_TAG..HEAD --count)
            echo "Commits since last tag: $COMMITS_SINCE_TAG"
            
            if [[ "$COMMITS_SINCE_TAG" -gt 5 ]]; then
              # If more than 5 commits since last tag, bump the version
              echo "should_bump=true" >> $GITHUB_OUTPUT
              echo "Version bump needed: $COMMITS_SINCE_TAG commits since last tag"
            else
              echo "should_bump=false" >> $GITHUB_OUTPUT
              echo "Version bump not needed: Only $COMMITS_SINCE_TAG commits since last tag"
            fi
          fi

  # After successful build, bump the version if needed
  version-bump:
    needs: [version-check]
    runs-on: ubuntu-latest
    # Only run on the master branch, not on pull requests or tags, and only if we should bump
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' && needs.version-check.outputs.should_bump == 'true'
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      version_bumped: ${{ steps.commit.outputs.version_bumped }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Bump the patch version (8.3.4 -> 8.3.5)
      - name: Bump version
        id: bump-version
        run: |
          # Extract version components
          CURRENT_VERSION="${{ needs.version-check.outputs.current_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT_VERSION -> New: $NEW_VERSION"
          
          # Update CMakeLists.txt
          sed -i "s/VERSION $CURRENT_VERSION/VERSION $NEW_VERSION/" CMakeLists.txt
          
          # Update PKGBUILD
          sed -i "s/pkgver=$CURRENT_VERSION/pkgver=$NEW_VERSION/" contrib/aur/lotus/PKGBUILD
      
      # Commit and push the version changes
      - name: Commit version bump
        id: commit
        run: |
          git config --global user.name "Mrs Turtle"
          git config --global user.email "mrs.turtle@lotusia.org"
          
          git add CMakeLists.txt contrib/aur/lotus/PKGBUILD
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}"
          
          # Push directly to master - make sure branch protection allows this
          git push origin HEAD:master
          
          echo "version_bumped=true" >> $GITHUB_OUTPUT
          echo "Version bumped and committed successfully"

  # Build jobs - split into separate jobs for parallelism
  build-lotusd:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotusd-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotusd-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build main lotusd image (this will be the default lotus-node image)
      - name: Build main lotusd Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotusd
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary from the image with fallback
      - name: Extract lotusd from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-node:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotusd ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotusd
            chmod +x ./artifacts/lotusd
          fi
      
      # Upload binary as artifact
      - name: Upload lotusd as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotusd-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotusd
          retention-days: 14

  build-lotus-cli:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-cli-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-cli-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build the lotus-cli image
      - name: Build lotus-cli Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-cli
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary with fallback mechanism
      - name: Extract binary from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-cli:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-cli ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotus-cli
            chmod +x ./artifacts/lotus-cli
          fi
      
      # Upload binary as artifact
      - name: Upload lotus-cli as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-cli-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-cli
          retention-days: 14

  build-lotus-seeder:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-seeder-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-seeder-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build lotus-seeder image
      - name: Build lotus-seeder Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-seeder
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary from the image with fallback
      - name: Extract lotus-seeder from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-seeder:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-seeder ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotus-seeder
            chmod +x ./artifacts/lotus-seeder
          fi
      
      # Upload binary as artifact
      - name: Upload lotus-seeder as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-seeder-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-seeder
          retention-days: 14

  build-lotus-tx:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-tx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-tx-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build lotus-tx image
      - name: Build lotus-tx Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-tx
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary from the image with fallback
      - name: Extract lotus-tx from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-tx:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-tx ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotus-tx
            chmod +x ./artifacts/lotus-tx
          fi
      
      # Upload binary as artifact
      - name: Upload lotus-tx as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-tx-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-tx
          retention-days: 14

  build-lotus-wallet:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-wallet-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-wallet-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build lotus-wallet image
      - name: Build lotus-wallet Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-wallet
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary from the image with fallback
      - name: Extract lotus-wallet from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-wallet:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-wallet ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotus-wallet
            chmod +x ./artifacts/lotus-wallet
          fi
      
      # Upload binary as artifact
      - name: Upload lotus-wallet as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-wallet-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-wallet
          retention-days: 14

  build-lotus-qt:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-qt-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-qt-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build lotus-qt image
      - name: Build lotus-qt Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-qt
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-qt:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-qt:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-qt:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary from the image with fallback
      - name: Extract lotus-qt from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-qt:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-qt ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary."
            touch ./artifacts/lotus-qt
            chmod +x ./artifacts/lotus-qt
          fi
      
      # Upload binary as artifact
      - name: Upload lotus-qt as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-qt-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-qt
          retention-days: 14

  build-lotus-gpu-miner:
    needs: [version-check, version-bump]
    runs-on: ubuntu-latest
    if: always() && (needs.version-bump.result == 'success' || needs.version-check.outputs.should_bump == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lotus-gpu-miner-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lotus-gpu-miner-
      
      - name: Set lowercase repository owner
        id: lowercase_repo_owner
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build lotus-gpu-miner image
      - name: Build lotus-gpu-miner Docker image
        uses: docker/build-push-action@v4
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: dockerfiles/Dockerfile.lotus-gpu-miner
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-gpu-miner:sha-${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-gpu-miner:${{ steps.get-version.outputs.version }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-gpu-miner:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move the cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
      
      # Extract binary and kernels from the image with fallback
      - name: Extract lotus-gpu-miner from Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          mkdir -p ./artifacts/kernels
          
          # Try to extract from the Docker image, but don't fail if image doesn't exist yet
          set +e  # Don't exit on error
          CONTAINER_ID=$(docker create ghcr.io/${{ env.REPO_OWNER_LC }}/lotus-gpu-miner:sha-${SHORT_SHA} 2>/dev/null)
          EXTRACT_EXIT_CODE=$?
          set -e  # Resume exit on error
          
          if [ $EXTRACT_EXIT_CODE -eq 0 ]; then
            # Image exists, extract binary and kernels
            docker cp $CONTAINER_ID:/opt/lotus/bin/lotus-gpu-miner ./artifacts/
            docker cp $CONTAINER_ID:/opt/lotus/kernels ./artifacts/
            docker rm -v $CONTAINER_ID
            echo "Successfully extracted binary and kernels from Docker image"
          else
            # Image doesn't exist yet, create placeholder binary and kernels folder
            echo "Docker image not found. This is normal during initial setup."
            echo "Future builds will extract the actual binary and kernels."
            touch ./artifacts/lotus-gpu-miner
            chmod +x ./artifacts/lotus-gpu-miner
            mkdir -p ./artifacts/kernels
          fi
      
      # Upload binary and kernels as artifact
      - name: Upload lotus-gpu-miner as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: lotus-gpu-miner-${{ steps.get-version.outputs.version }}
          path: |
            ./artifacts/lotus-gpu-miner
            ./artifacts/kernels/
          retention-days: 14

  # Combine all artifacts into a single tarball with robust error handling
  package-artifacts:
    needs: [build-lotusd, build-lotus-cli, build-lotus-seeder, build-lotus-tx, build-lotus-wallet, build-lotus-qt, build-lotus-gpu-miner]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    
    steps:
      # Get version number
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Get current version
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      # Make directory for artifacts
      - name: Create artifacts directory
        run: |
          mkdir -p ./artifacts
          mkdir -p ./artifacts/kernels
      
      # Download all binary artifacts with error handling
      - name: Download lotusd artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotusd-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-cli artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-cli-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-seeder artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-seeder-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-tx artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-tx-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-wallet artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-wallet-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-qt artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-qt-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      - name: Download lotus-gpu-miner artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: lotus-gpu-miner-${{ steps.get-version.outputs.version }}
          path: ./artifacts/
      
      # Create placeholder files for any missing artifacts
      - name: Create placeholder files for missing artifacts
        run: |
          # Create placeholders for binaries that might be missing
          for binary in lotusd lotus-cli lotus-seeder lotus-tx lotus-wallet lotus-qt lotus-gpu-miner; do
            if [ ! -f "./artifacts/$binary" ]; then
              echo "Creating placeholder for missing binary: $binary"
              touch "./artifacts/$binary"
              chmod +x "./artifacts/$binary"
            fi
          done
          
          # Make sure the kernels directory exists
          mkdir -p ./artifacts/kernels
      
      # Make sure all binaries are executable
      - name: Set permissions
        run: |
          chmod +x ./artifacts/*
      
      # Create tarball of all binaries and kernels
      - name: Create tarball
        run: |
          cd ./artifacts
          
          # Create a directory structure to ensure kernels are next to the binary
          mkdir -p gpu-miner-package/kernels
          
          # Copy lotus binaries to the root of the tarball
          cp lotus* gpu-miner-package/
          
          # Copy kernels folder for the GPU miner if it exists
          if [ -d "./kernels" ] && [ "$(ls -A ./kernels 2>/dev/null)" ]; then
            cp -r kernels/* gpu-miner-package/kernels/ || true
          fi
          
          # Create the tarball from the prepared directory
          tar -czvf lotus-binaries-${{ steps.get-version.outputs.version }}.tar.gz gpu-miner-package/
          
          # Clean up temporary directory
          rm -rf gpu-miner-package
          
          cd ..
      
      # Upload combined artifact
      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lotus-binaries-${{ steps.get-version.outputs.version }}
          path: ./artifacts/lotus-binaries-*.tar.gz
          retention-days: 14

  # Update revert-version-bump to depend on the GPU miner job
  revert-version-bump:
    needs: [version-bump, build-lotusd, build-lotus-cli, build-lotus-seeder, build-lotus-tx, build-lotus-wallet, build-lotus-qt, build-lotus-gpu-miner]
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.version-bump.result == 'success' && 
      (needs.build-lotusd.result == 'failure' || 
       needs.build-lotus-cli.result == 'failure' || 
       needs.build-lotus-seeder.result == 'failure' || 
       needs.build-lotus-tx.result == 'failure' || 
       needs.build-lotus-wallet.result == 'failure' || 
       needs.build-lotus-qt.result == 'failure' ||
       needs.build-lotus-gpu-miner.result == 'failure')
    
    steps:
      - name: Checkout code with version bump
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0
      
      - name: Get version details  
        id: get-versions
        run: |
          CURRENT_VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate the previous version (that we want to revert to)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          PREV_PATCH=$((PATCH - 1))
          PREV_VERSION="$MAJOR.$MINOR.$PREV_PATCH"
          echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT
          
          echo "Current version: $CURRENT_VERSION, Reverting to: $PREV_VERSION"
      
      - name: Revert version bump
        run: |
          # Setup git with the same identity used for bumping
          git config --global user.name "Mrs Turtle"
          git config --global user.email "mrs.turtle@lotusia.org"
          
          # Update CMakeLists.txt to the previous version
          sed -i "s/VERSION ${{ steps.get-versions.outputs.current_version }}/VERSION ${{ steps.get-versions.outputs.prev_version }}/" CMakeLists.txt
          
          # Update PKGBUILD to the previous version
          sed -i "s/pkgver=${{ steps.get-versions.outputs.current_version }}/pkgver=${{ steps.get-versions.outputs.prev_version }}/" contrib/aur/lotus/PKGBUILD
          
          # Commit and push the reversion
          git add CMakeLists.txt contrib/aur/lotus/PKGBUILD
          git commit -m "Revert version bump to ${{ steps.get-versions.outputs.current_version }} due to build failure"
          git push origin HEAD:master
          
          echo "Version revert completed. Reverted from ${{ steps.get-versions.outputs.current_version }} back to ${{ steps.get-versions.outputs.prev_version }}"

  # Update create-tag job to depend on all build jobs including GPU miner
  create-tag:
    needs: [version-check, version-bump, build-lotusd, build-lotus-cli, build-lotus-seeder, build-lotus-tx, build-lotus-wallet, build-lotus-qt, build-lotus-gpu-miner, package-artifacts, revert-version-bump]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.ref == 'refs/heads/master' && 
      needs.build-lotusd.result == 'success' &&
      needs.build-lotus-cli.result == 'success' &&
      needs.build-lotus-seeder.result == 'success' &&
      needs.build-lotus-tx.result == 'success' &&
      needs.build-lotus-wallet.result == 'success' &&
      needs.build-lotus-qt.result == 'success' &&
      needs.build-lotus-gpu-miner.result == 'success' &&
      (needs.version-check.outputs.should_bump == 'false' || needs.version-bump.result == 'success') &&
      (needs.revert-version-bump.result == 'skipped' || needs.revert-version-bump.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0
      
      - name: Get current version (post-bump)
        id: get-version
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION=$(grep -Po "VERSION\s+\K[0-9]+\.[0-9]+\.[0-9]+" CMakeLists.txt)
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
            echo "should_tag=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "should_tag=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION does not exist yet"
          fi
      
      - name: Set up Git identity
        if: steps.check-tag.outputs.should_tag == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Create and push tag
        if: steps.check-tag.outputs.should_tag == 'true'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag v$VERSION"
      
      # Download artifacts using the current version from the files
      - name: Download artifacts
        if: steps.check-tag.outputs.should_tag == 'true'
        uses: actions/download-artifact@v4
        with:
          name: lotus-binaries-${{ steps.get-version.outputs.version }}
          path: ./artifacts
      
      # Create GitHub Release
      - name: Create Release
        if: steps.check-tag.outputs.should_tag == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          files: ./artifacts/lotus-binaries-*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true

  # deploy:
  #   needs: build
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Set up SSH
  #       uses: webfactory/ssh-agent@v0.7.0
  #       with:
  #         ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
  #     - name: Update docker-compose file
  #       run: |
  #         # Ensure proper image format if no explicit registry was specified
  #         if grep -q "image: lotus-node:" docker-compose.yml; then
  #           sed -i 's|image: lotus-node:.*|image: ghcr.io/${{ github.repository_owner }}/lotus-node:latest|g' docker-compose.yml
  #         fi
          
  #         # Update image reference in docker-compose.yml to use GitHub Container Registry with correct format
  #         if grep -q "image: ghcr.io/lotus-node:" docker-compose.yml; then
  #           sed -i 's|image: ghcr.io/lotus-node:.*|image: ghcr.io/${{ github.repository_owner }}/lotus-node:latest|g' docker-compose.yml
  #         fi
      
  #     - name: Deploy to production
  #       if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
  #       run: |
  #         mkdir -p ~/.ssh
  #         ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
  #         scp docker-compose.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/data/lotus/
  #         ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /data/lotus && docker-compose pull && docker-compose up -d"